syntax = "proto3";

package lospan;

option go_package = "./lospan";

// Application is a logical construct on top of devices. Devices in the same application share the same
// application key
message Application {
    string eui = 1; 
};

// State of device
enum DeviceState {
    UNSPECIFIED = 0;
    OTAA = 1;
    ABP = 2;
    DISABLED = 3;
};

// Device is the ... device that connects to the gateway. "Node" might be a better name since it's 
// part of the LoRaWAN implementation nomenclature.
message Device {
    optional string eui = 1; // Tecnhically required but can be skipped when creating a new
    string application_eui = 2;
    optional DeviceState state = 3;
    optional uint32 dev_addr = 4;           // 7+25 bits
    optional bytes app_key = 5;             // 16 bytes/256 bits
    optional bytes app_session_key = 6;     // 16 bytes/256 bits
    optional bytes network_session_key = 7; // 16 bytes/256 bits
    optional int32 frame_count_up = 8;      // in reality uint16 
    optional int32 frame_count_down = 9;    // in reality uint16 
    optional bool relaxed_counter = 10;
    optional bool key_warning = 11;         // Ignored on updates; set by service
    repeated int32 dev_nonces = 12;         // in reality uint16 
};

// UpstreamMessage is a message from one of the devices
message UpstreamMessage{

};

// DownstreamMessage is a message that should be or is sent to one of the devices
message DownstreamMessage{

};

// Gateway is a LoRaWAN gateway/concentrator. 
message Gateway {
    string eui = 1;
    optional string ip = 2; // Strictly not optional but used when updating
    optional bool strict_ip = 3;
    optional float latitude = 4;
    optional float longitude = 5;
    optional float altitude = 6;
};

// GatewayMessage is a monitoring message to and from the gateway. This reflects the LoRaWAN gateway UDP
// protocol which again is more or less a 1:1 representation of the radio traffic with acks on top.
message GatewayMessage{

};
